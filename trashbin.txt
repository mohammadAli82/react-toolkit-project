fect(()=>{
    dispatch(fetchAsync());
  })
 

  useEffect(()=>{
    dispatch(fetchAsync());
  },[])
 
axios.post('/api/cart', item);
 

import {fetchI}
 
// store.js
import { configureStore } from '@reduxjs/toolkit';
import productsReducer from '../features/products/productsSlice';
import cartReducer from '../features/cart/cartSlice'

const store = configureStore({
  reducer: {
    products: productsReducer,
    cart:cartReducer
    // Add other reducers here if needed
  },
});

export default store;

 
import { useDispatch, useSelector } from "react-redux";
import { useEffect } from "react";
import { fetchAsync } from "../products/productsSlice";

export function Cart() {
  const dispatch = useDispatch();
  const items = useSelector((state) => state.cart.items);
  useEffect(() => {
    dispatch(fetchAsync());
  }, []);

  return (
    <>
      {items.map((item) => {
        return (
          <div className="card" style={{marginRight: 'em'}}>
            <img className="card-img-top" src={item.thumbnail} alt="Card image cap" style={{width:"200px"}} />
            <div className="card-body">
              <h5 className="card-title">{item.title}</h5>
              <p className="card-text">{item.description}
              </p>
              <a href="#" className="btn btn-primary">
                Go somewhere
              </a>
            </div>
          </div>
        );
      })}
    </>
  );
}

 
import { useDispatch, useSelector } from 'react-redux';
import { useEffect } from 'react';
import { fetchAsync } from "./productsSlice";
import '../products/Card.css';
import { addAsync } from '../cart/cartSlice';

export function Products() {
  const dispatch = useDispatch();
  const products = useSelector(state => state.products.products);

  return (
    <>
      <button onClick={() => dispatch(fetchAsync())}>Fetch Products</button>
      {products.map(product => (
        <div className="card" key={product.id}>
          <img src={product.thumbnail} alt={product.title} style={{ width: '100%' }} />
          <h1>{product.title}</h1>
          <p className="price">{product.price}</p>
          <p>{product.description}</p>
          <p>
            <button onClick={()=>dispatch(addAsync(product))}>Add to Cart</button>
          </p>
        </div>
      ))}
    </>
  );
}

 
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchItems,addItem,updateItem,deleteItem } from './cartApi';
import { fetchAsync } from '../products/productsSlice';

const initialState = {
  items: [],
  status: 'idle',
};

export const addAsync = createAsyncThunk(
  'cart/addItem',
  async (item) => {
    const {price,id,title,brand}=item
    const response = await addItem({price,id,title,brand});
    return response.data;
  }
);

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = action.payload;
      })
      .addCase(addAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items.push(action.payload)
      });
  },
});

// export const { } = cartSlice.actions;

export default cartSlice.reducer;

 
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProducts } from './productsApi';

const initialState = {
  products: [],
  status: 'idle',
};

export const fetchAsync = createAsyncThunk(
  'products/fetchProducts',
  async () => {
    const response = await fetchProducts();
    return response.data;
  }
);

export const productsSlice = createSlice({
  name: 'products',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload;
      });
  },
});

// export const { } = productsSlice.actions;

export default productsSlice.reducer;

 
para
 

                Some quick example text to build on the card title and make up
                the bulk of the card's content.
 
Card title
 
spacing +
 
"width: 18rem;"
 
class
 

</div>
 
 <>
              <h1>{item.price}</h1>
            </>
 

            <>
 

            </>
 

              <h1>{item.price}</h1>
 

          <p>
            <button onClick={()=>dispatch(addAsync(product))}>Add to Cart</button>
          </p>
 
return (
            <>
              <h1>{item.price}</h1>
            </>
          )
 
../products/productsSlice
 

import { fetchAsync } from '../products/productsSlice';
 
this is cart item
 

              <h2>apple</h2>
 

import { fetchAsync } from '../products copy/productsSlice';
 

// import { fetchAsync } from "./productsSlice";
 

import '../cart/Card.css';
 
item
 
fetchcart
 
./products
 
Products
 
{items.map(item => (
        <div className="card" key={product.id}>
          <img src={item.thumbnail} alt={item.title} style={{ width: '100%' }} />
          <h1>{item.title}</h1>
          <p className="price">{item.price}</p>
          <p>{item.description}</p>
          <p>
            <button>Add to Cart</button>
          </p>
        </div>
      ))}
 
product
 

      <button onClick={() => dispatch(fetchAsync())}>Fetch Products</button>
 
 products
 
products
 

import { fetchProducts } from './productsApi';
 
updateItems
 
// index.js
import React from 'react';
import { createRoot } from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { Provider } from 'react-redux';
import store from './app/store';

const root = createRoot(document.getElementById('root'));

root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);

reportWebVitals();

 
decrement()
 
selectCount
 

        <span className={styles.value}>{count}</span>
 

        <button
          className={styles.button}
          aria-label="Increment value"
          onClick={() => dispatch(increment())}
        >
          +
        </button>
 

      <div className={styles.row}>
        <input
          className={styles.textbox}
          aria-label="Set increment amount"
          value={incrementAmount}
          onChange={(e) => setIncrementAmount(e.target.value)}
        />
      </div>
 

      <div className={styles.row}>
        <input
          className={styles.textbox}
          aria-label="Set increment amount"
          value={incrementAmount}
          onChange={(e) => setIncrementAmount(e.target.value)}
        />
 

        <button
          className={styles.button}
          onClick={() => dispatch(incrementByAmount(incrementValue))}
        >
          Add Amount
        </button>
 

        <button
          className={styles.asyncButton}
          onClick={() => dispatch(incrementAsync(incrementValue))}
        >
          Add Async
        </button>
 

        <button
          className={styles.button}
          onClick={() => dispatch(incrementIfOdd(incrementValue))}
        >
          Add If Odd
        </button>
 
 <span className={styles.value}>{count}</span>
        <button
          className={styles.button}
          aria-label="Increment value"
          onClick={() => dispatch(increment())}
        >
          +
        </button>
      </div>
      <div className={styles.row}>
        <input
          className={styles.textbox}
          aria-label="Set increment amount"
          value={incrementAmount}
          onChange={(e) => setIncrementAmount(e.target.value)}
        />
        <button
          className={styles.button}
          onClick={() => dispatch(incrementByAmount(incrementValue))}
        >
          Add Amount
        </button>
        <button
          className={styles.asyncButton}
          onClick={() => dispatch(incrementAsync(incrementValue))}
        >
          Add Async
        </button>
        <button
          className={styles.button}
          onClick={() => dispatch(incrementIfOdd(incrementValue))}
        >
          Add If Odd
        </button>
      </div>
 

import {
  decrement,
  increment,
  incrementByAmount,
  incrementAsync,
  incrementIfOdd,
  selectCount,
} from './productSlice';
 
./productSlice
 
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProducts } from './productsAPI';

const initialState = {
  products: [],
  status: 'idle',
};
export const fetchAsync = createAsyncThunk(
  'products/fetchProduct',
  async () => {
    const response = await fetchProducts();
    return response.data;
  }
);

export const productsSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const {  } = productsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`


export default productsSlice.reducer;

 
import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  decrement,
  increment,
  incrementByAmount,
  incrementAsync,
  incrementIfOdd,
  selectCount,
} from './productSlice';
import styles from './Products.module.css';

export function Products() {
  const count = useSelector(selectCount);
  const dispatch = useDispatch();
  const [incrementAmount, setIncrementAmount] = useState('2');

  const incrementValue = Number(incrementAmount) || 0;

  return (
    <div>
      <div className={styles.row}>
        <button
          className={styles.button}
          aria-label="Decrement value"
          onClick={() => dispatch(decrement())}
        >
          -
        </button>
        <span className={styles.value}>{count}</span>
        <button
          className={styles.button}
          aria-label="Increment value"
          onClick={() => dispatch(increment())}
        >
          +
        </button>
      </div>
      <div className={styles.row}>
        <input
          className={styles.textbox}
          aria-label="Set increment amount"
          value={incrementAmount}
          onChange={(e) => setIncrementAmount(e.target.value)}
        />
        <button
          className={styles.button}
          onClick={() => dispatch(incrementByAmount(incrementValue))}
        >
          Add Amount
        </button>
        <button
          className={styles.asyncButton}
          onClick={() => dispatch(incrementAsync(incrementValue))}
        >
          Add Async
        </button>
        <button
          className={styles.button}
          onClick={() => dispatch(incrementIfOdd(incrementValue))}
        >
          Add If Odd
        </button>
      </div>
    </div>
  );
}

 

  decrement,
  increment,
  incrementByAmount,
  incrementAsync,
  incrementIfOdd,
 

  selectCount,
 

import {
  decrement,
  increment,
  incrementByAmount,
  incrementAsync,
  incrementIfOdd,
  selectCount,
} from './counterSlice';
 

import counterReducer from '../features/counter/counterSlice';
 

import produ
 

    // 30 items
 

    {...},
    {...},
    {...}
 

export const selectCount = (state) => state.counter.value;
 
increment, decrement, incrementByAmount
 
increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
 
Counter
 

import logo from './logo.svg';
import { Counter } from './features/counter/Counter';
 
 <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <Counter />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <span>
          <span>Learn </span>
          <a
            className="App-link"
            href="https://reactjs.org/"
            target="_blank"
            rel="noopener noreferrer"
          >
            React
          </a>
          <span>, </span>
          <a
            className="App-link"
            href="https://redux.js.org/"
            target="_blank"
            rel="noopener noreferrer"
          >
            Redux
          </a>
          <span>, </span>
          <a
            className="App-link"
            href="https://redux-toolkit.js.org/"
            target="_blank"
            rel="noopener noreferrer"
          >
            Redux Toolkit
          </a>
          ,<span> and </span>
          <a
            className="App-link"
            href="https://react-redux.js.org/"
            target="_blank"
            rel="noopener noreferrer"
          >
            React Redux
          </a>
        </span>
      </header>
 
counterSlice
 
incrementAsync
 
incrementAsync
 
amount
 

    // The value we return becomes the `fulfilled` action payload
 

import { fetc } from './counterAPI';
 
fetchCount
 

  return new Promise((resolve) =>
 

    setTimeout(() => resolve({ data: amount }), 500)
  );
}
 

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};
 
counter
 
